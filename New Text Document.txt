#2. Data Types - R Objects and Attributes, Data Types - Vectors and
Lists

#1. Basic Data Types in R
#Numeric
num_var <- 10.5
print(num_var)
class(num_var)

#Integer
int_var <- 10L
print(int_var)
class(int_var)

#Character
char_var <- "Hello R"
print(char_var)
Logical

#log_var <- TRUE
print(log_var)
class(log_var)

#Complex
comp_var <- 3 + 2i
print(comp_var)
class(comp_var)
#
2. R Objects and Attributes
#Create a vector with attributes
vec <- c(1, 2, 3, 4)
attr(vec, "description") <- "This is a numeric vector"
print(vec)
attributes(vec)


#Create a matrix with attributes
mat <- matrix(1:9, nrow=3)
dimnames(mat) <- list(c("Row1", "Row2", "Row3"), c("Col1", "Col2",
"Col3"))
print(mat)
attributes(mat)


#3. Vectors in R
#Numeric vector

num_vec <- c(1, 2, 3, 4, 5)
print(num_vec)

#Character vector
char_vec <- c("apple", "banana", "cherry")
print(char_vec)

#Logical vector
log_vec <- c(TRUE, FALSE, TRUE, FALSE)
print(log_vec)

#Operations on vectors
vec1 <- c(1, 2, 3)
vec2 <- c(4, 5, 6)
sum_vec <- vec1 + vec2 # Element-wise addition
print(sum_vec)

#4. Lists in R
#Creating a list with different data types
my_list <- list(name = "Dhayanidhi", age = 20, marks = c(85, 90, 95))
print(my_list)

#Accessing elements in a list
print(my_list$name) # Access by name
print(my_list[[2]]) # Access by index

#Modifying a list
my_list$age <- 21
print(my_list)

-------------------------------------------------------------------------------------------------------------------
3. Data Types - Data Frames, Matrices, Factors & Functions


# create a dataframe

students <- data.frame(
  name = c("arun",'mani','kalai'),
  age = c(23,33,19),
  grade = c('A','B','c')
)

print(students)

#inspect structure
str(students)  #check structure / show data types
summary(students)

#access columns

students$name
students[,"age"]

# add a new columns

students$gender <- c("m","m","m")
print(students)


# 2. create a Matrix
my_matrix <- matrix(1:9, nrow = 3, ncol = 3)
colnames(my_matrix) <- c("Col1", "Col2", "Col3")
rownames(my_matrix) <- c("Row1", "Row2", "Row3")

# Access single element
element_2_3 <- my_matrix[2, 3]

# Access entire row
row_1 <- my_matrix[1, ]

# Access entire column
column_2 <- my_matrix[, 2]

# factors

blood_group<- factor(c("a","b","ab","o","a"))
print(blood_group)

levels(blood_group)


#function 

square <- function(x){
  return(x^2)
}
print(square(5))


additon <- function(x,y){
  return(x+y)
}

print(additon(5,5))



-------------------------------------------------------------------------------------------------------------------
4. Expression & Logical Statement in R

# Expression Evaluation
a <- 10
b <- 5
sum_result <- a + b
product_result <- a * b
division_result <- a / b

# Logical Statements
x <- 15
y <- 20

# Relational Operators
is_equal <- x == y
is_greater <- x > y
is_less_or_equal <- x <= y

# Logical Operators
logical_and <- (x > 10) & (y > 10)
logical_or <- (x < 10) | (y > 10)
logical_not <- !(x == y)

# If Statement
age <- 18
if (age >= 18) {
  print("Adult")
} else {
  print("Minor")
}

# ifelse function

marks <- c(75, 92, 68)
result <- ifelse(marks >= 70, "Pass", "Fail")
print(result)


# Printing all outputs
print(paste("Sum:", sum_result))
print(paste("Product:", product_result))
print(paste("Division:", division_result))

print(paste("x == y:", is_equal))
print(paste("x > y:", is_greater))
print(paste("x <= y:", is_less_or_equal))

print(paste("Logical AND:", logical_and))
print(paste("Logical OR:", logical_or))
print(paste("Logical NOT:", logical_not))


-------------------------------------------------------------------------------------------------------------------
5. Sub setting of List, Matrices, & Data frame

# 1. Subsetting a List
my_list <- list(name = "Arun", age = 23, scores = c(90, 85, 88))

# Access using $
name_value <- my_list$name

# Access using [[ ]]
age_value <- my_list[[2]]

# Access using [ ]
first_two_elements <- my_list[1:2]

# 2. Subsetting a Matrix
my_matrix <- matrix(1:9, nrow = 3, ncol = 3)
colnames(my_matrix) <- c("Col1", "Col2", "Col3")
rownames(my_matrix) <- c("Row1", "Row2", "Row3")

# Access single element
element_2_3 <- my_matrix[2, 3]

# Access entire row
row_1 <- my_matrix[1, ]

# Access entire column
column_2 <- my_matrix[, 2]

# 3. Subsetting a Data Frame
my_df <- data.frame(Name = c("Arun", "Bala", "Chitra"),
                    Age = c(23, 25, 22),
                    Marks = c(88, 92, 79))

# Access specific column
names_column <- my_df$Name

# Access specific row
second_row <- my_df[2, ]

# Conditional subsetting
marks_above_80 <- my_df[my_df$Marks > 80, ]


-------------------------------------------------------------------------------------------------------------------
6.  Data frame functions on inbuilt Dataset


# Load inbuilt dataset
data("mtcars")

# View first few rows
head_rows <- head(mtcars)

# View last few rows
tail_rows <- tail(mtcars)

# Dimensions of the dataset
dataset_dim <- dim(mtcars)

# Number of rows and columns
total_rows <- nrow(mtcars)
total_columns <- ncol(mtcars)

# Structure of the dataset
dataset_structure <- str(mtcars)

# Summary of the dataset
dataset_summary <- summary(mtcars)

# Column and Row names
column_names <- names(mtcars)
row_names <- rownames(mtcars)

# Access specific column
mpg_column <- mtcars$mpg

# Access specific row
row_5 <- mtcars[5, ]

# Subset cars with mpg greater than 20
high_mpg_cars <- mtcars[mtcars$mpg > 20, ]


-------------------------------------------------------------------------------------------------------------------
7.  Dplyr Function on Retail Dataset

# Load dplyr
library(dplyr)


# Sample Retail Dataset
retail_data <- data.frame(
  CustomerID = 101:105,
  Product = c("Shirt", "Pants", "Shoes",  "Hat", "Pants"),
  Category = c("Clothing", "Clothing", "Footwear", "Accessories",
               "Clothing"),
  Quantity = c(2, 1, 3, 2, 1),
  Price = c(500, 700, 1200, 500, 1200)
)

# 1. Select specific columns
selected_data <- retail_data %>% select(Product, Quantity, Price)
print(selected_data)

# 2. Filter data for Quantity greater than 2
filtered_data <- retail_data %>% filter(Quantity > 2)
print(filtered_data)

# 3. Arrange data by Price descending
arranged_data <- retail_data %>% arrange(desc(Price))

# 4. Create new column: TotalAmount = Quantity * Price
mutated_data <- retail_data %>% mutate(TotalAmount = Quantity * Price)
print(mutated_data)

# 5. Group by Category and summarise total sales
category_summary <- retail_data %>%
  mutate(TotalAmount = Quantity * Price) %>%
  group_by(Category) %>%
  summarise(Total_Sales = sum(TotalAmount))

print(category_summary)



-------------------------------------------------------------------------------------------------------------------
8. Dplyr Function on Banking Dataset

# Load dplyr
library(dplyr)

# Sample Banking Dataset
bank_data <- data.frame(
  CustomerID = 1:6,
  Age = c(25, 42, 35, 28, 50, 31),
  Balance = c(15000, 30000, 22000, 18000, 40000, 25000),
  AccountType = c("Savings", "Current", "Savings", "Savings", "Current", "Current")

)

# 1. Select specific columns
selected_data <- bank_data %>% select(CustomerID, Balance)

# 2. Filter customers with Balance > 20000
filtered_data <- bank_data %>% filter(Balance > 20000)

# 3. Arrange by Balance in descending order
arranged_data <- bank_data %>% arrange(desc(Balance))

# 4. Add Interest column (5% of balance)
mutated_data <- bank_data %>% mutate(Interest = Balance * 0.05)

# 5. Group by AccountType and get average balance
summary_data <- bank_data %>%
  group_by(AccountType) %>%
  summarise(Average_Balance = mean(Balance))


-------------------------------------------------------------------------------------------------------------------

# Load packages
library(ggplot2)

# Load and prepare data
data("Titanic")
titanic_df <- as.data.frame(Titanic)

# 1. Bar Plot – Survival Count
ggplot(titanic_df, aes(x = Survived, y = Freq, fill = Survived)) +
  geom_bar(stat = "identity") +
  labs(title = "Survival Count on Titanic", x = "Survived", y = "Count") +
  theme_minimal()

# 2. Stacked Bar Plot – Survival by Class
ggplot(titanic_df, aes(x = Class, y = Freq, fill = Survived)) +
  geom_bar(stat = "identity") +
  labs(title = "Survival by Passenger Class", x = "Class", y = "Count") +
  theme_minimal()


# 3. Grouped Bar Plot – Sex vs Survival
ggplot(titanic_df, aes(x = Sex, y = Freq, fill = Survived)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Survival by Sex", x = "Sex", y = "Count") +
  theme_minimal()



data(mtcars)
hist(mtcars$mpg,main="histogram of mpg",xlab="mile per gallon",col="lightblue",border='black')

data(iris)
plot(iris$Sepal.Width,iris$Sepal.Length,
     main="Scatter plot of sepal width vs sepal length",
     xlab="sepal width",
     ylab="sepal length",
     pch=19,
     col=iris$Species)



